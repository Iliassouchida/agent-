from pydantic import BaseModel, Field
import pandas as pd
import requests
from langchain_core.documents import Document
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_google_genai import GoogleGenerativeAIEmbeddings, ChatGoogleGenerativeAI
from langchain_chroma import Chroma
from langchain.chains import ConversationalRetrievalChain
from langchain.prompts import PromptTemplate
from langchain.memory import ConversationBufferMemory
from langchain.agents import initialize_agent, AgentType
from langchain.tools import tool
import os
import json # Ajout√© pour la sauvegarde de la m√©moire

# --- Configuration de l'API Gemini ---
os.environ["GOOGLE_API_KEY"] = "AIzaSyDvtQDt4Ayl854qmkhF2H5lhnMfHPS5c6s"

# --- Outil pour trouver les agences par ville (Version avec tableau) ---

@tool
def trouver_agences_par_ville(ville: str) -> str:
    """
    Cet outil est utilis√© pour trouver les agences de ventes, les bureaux et les points de retrait de Chronopost au Maroc.
    Il prend en entr√©e le nom d'une ville (par exemple "Casablanca" ou "Rabat") et retourne un tableau des agences,
    avec leurs noms, adresses et num√©ros de t√©l√©phone.
    """
    ville_formatee = ville.capitalize()
    url = f"http://chronopost.ma:9595/chronomobile/getBranchByCity/{ville_formatee}"
    
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
        "Content-Type": "application/json"
    }

    try:
        response = requests.post(url, headers=headers, json={}, timeout=10)
        response.raise_for_status()
        
        data = response.json()
        agences = data.get("cities", [])

        if not agences:
            return f"‚ùå Aucune agence trouv√©e pour la ville de {ville}. Veuillez v√©rifier l'orthographe ou essayer une autre ville."

        # Cr√©ation d'une liste de dictionnaires pour le DataFrame
        liste_agences = []
        for agence in agences:
            liste_agences.append({
                "Nom": agence.get("name", "N/A"),
                "Adresse": agence.get("address", "N/A").replace('\n', ', '),
                "T√©l√©phone": agence.get("tel", "N/A")
            })

        # Cr√©ation du DataFrame pandas
        df = pd.DataFrame(liste_agences)
        
        # Nettoyage et formatage du DataFrame
        # Remplacer les valeurs null par des cha√Ænes vides pour un affichage plus propre
        df = df.fillna('N/A')
        
        # Convertir le DataFrame en une cha√Æne de caract√®res au format Markdown pour un affichage structur√©
        resultat = f"‚úÖ Voici les agences Chronopost trouv√©es √† **{ville_formatee}** :\n\n"
        resultat += df.to_markdown(index=False)
        
        return resultat
    
    except requests.exceptions.HTTPError as err:
        return f"üö® Erreur HTTP lors de la connexion √† l'API : {err}"
    except requests.exceptions.RequestException as err:
        return f"üö® Erreur de connexion : {err}"
    except (ValueError, KeyError) as err:
        return f"üö® Erreur lors du traitement des donn√©es de l'API : {err}"

# --- Outil de suivi de colis (corrig√© avec en-t√™te) ---
@tool
def suivre_colis(numero_de_suivi: str) -> str:
    """
    Recherche le statut d'un colis Chronopost. Prend en entr√©e un num√©ro de suivi. 
    Retourne le dernier statut du colis en une phrase simple et lisible.
    """
    url = f"http://ws.chronopost.ma:8080/wscima/tracking/parcels?parcelIds={numero_de_suivi}"
    
    # Ajout d'un en-t√™te User-Agent pour simuler une requ√™te de navigateur
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
    }

    try:
        response = requests.get(url, headers=headers, timeout=10)
        response.raise_for_status()
        data = response.json()
        
        if data and isinstance(data, list) and len(data) > 0:
            parcel = data[0]
            if 'events' in parcel and parcel['events']:
                last_event = parcel['events'][0]
                status_description = last_event.get('description')
                
                if status_description:
                    return f"Le dernier statut de votre colis {numero_de_suivi} est : **{status_description}**."
                else:
                    return "Aucune description de statut n'a √©t√© trouv√©e pour ce colis."
            else:
                return "Aucun √©v√©nement de suivi n'a √©t√© trouv√© pour ce num√©ro de colis."
        else:
            return "Num√©ro de suivi non trouv√© dans la base de donn√©es de Chronopost."

    except requests.exceptions.HTTPError as err:
        return f"Erreur HTTP : {err}"
    except requests.exceptions.RequestException as err:
        return f"Erreur de connexion : {err}"
    except (ValueError, KeyError) as err:
        return f"Erreur de traitement des donn√©es de l'API : {err}"

# --- Outil RAG pour les questions sur Chronopost ---
@tool
def repondre_avec_documents(query: str) -> str:
    """
    R√©pond √† des questions sp√©cifiques sur les services, les valeurs ou les proc√©dures de Chronopost Maroc en utilisant la documentation interne.
    Cet outil est fait pour les questions dont la r√©ponse est probablement dans la FAQ.
    """
    llm = ChatGoogleGenerativeAI(model="gemini-1.5-flash")
    retriever = db.as_retriever()
    memory = ConversationBufferMemory(memory_key="chat_history", return_messages=True)
    qa_chain = ConversationalRetrievalChain.from_llm(llm, retriever, memory=memory)
    response = qa_chain.invoke({"question": query})
    return response['answer']

# --- Outil de discussion g√©n√©rale ---
@tool
def repondre_general(query: str) -> str:
    """
    R√©pond √† des questions qui ne sont pas li√©es √† Chronopost, comme des salutations ou des questions g√©n√©rales.
    Cet outil utilise les connaissances g√©n√©rales du mod√®le pour r√©pondre.
    """
    llm = ChatGoogleGenerativeAI(model="gemini-1.5-flash")
    return llm.invoke(query).content



# --- Chargement et pr√©paration des donn√©es ---
try:
    df = pd.read_csv('faq.csv')
    print("Fichier CSV charg√© avec succ√®s.")
    df.dropna(inplace=True)
except FileNotFoundError:
    print("Erreur : Le fichier 'faq.csv' n'a pas √©t√© trouv√©.")
    exit()
except KeyError:
    print("Erreur : Le fichier CSV ne contient pas les colonnes 'Question' ou 'R√©ponse'.")
    print("Veuillez v√©rifier les en-t√™tes de votre fichier.")
    exit()

documents = []
for index, row in df.iterrows():
    content = f"Question : {row['Question']}\nR√©ponse : {row['R√©ponse']}"
    metadata = {'source': 'faq.csv', 'row_id': index}
    doc = Document(page_content=content, metadata=metadata)
    documents.append(doc)

# --- Ajout du texte d√©taill√© ---
nouveau_texte_chronopost = """
Bien s√ªr, voici des informations d√©taill√©es sur Chronopost Maroc :
üì¶ Pr√©sentation de Chronopost Maroc
Chronopost International Maroc est une filiale commune du groupe Barid Al Maghrib (BAM) et de Geopost S.A. (France), cr√©√©e en mars 2001. Elle est sp√©cialis√©e dans le transport et la messagerie internationale express, offrant des services de livraison rapide vers plus de 230 pays et territoires. Son si√®ge est situ√© √† Casablanca, au 110 boulevard Mohamed Zerktouni.
üåç R√©seau et couverture
R√©seau national : Plus de 600 points de vente au Maroc, incluant 10 agences en propre et plus de 500 points de vente partenaires tels que Barid Al Maghrib, Amana, Al Barid Bank et Barid Cash.
R√©seau international : Partenaire du groupe DPDgroup, Chronopost Maroc b√©n√©ficie d'un r√©seau mondial de plus de 32 filiales, desservant plus de 230 pays et territoires.
üöö Services propos√©s
1. Chrono EXPRESS
Description : Service de messagerie internationale express garantissant la livraison en 1 √† 3 jours ouvr√©s vers les principaux pays.
Avantages :
Livraison √† domicile avec 3 tentatives.
Suivi digitalis√© via le site web, l'application mobile et notifications par SMS.
Assurance optionnelle.
Services suppl√©mentaires tels que DDP (Delivery Duty Paid), preuve de livraison, et emballage.
2. EMS (Express Mail Service)
Description : Service de messagerie internationale postale rapide assurant la livraison de vos colis √† l‚Äô√©tranger dans des d√©lais fiables √† des tarifs √©conomiques.
Avantages :
D√©lais de livraison de 5 √† 10 jours ouvr√©s.
Territoires desservis : Plus de 100 pays et territoires.
Poids autoris√© : Jusqu'√† 30 kg.
Suivi digitalis√© de la tra√ßabilit√© des envois.
Assurance optionnelle.
Service client d√©di√© 6j/7.
üí∞ Tarification
Les tarifs varient en fonction du poids, de la destination et du service choisi. Pour obtenir une estimation pr√©cise, vous pouvez utiliser l'outil de calcul de tarif disponible sur le site officiel de Chronopost Maroc.
üìç R√©seau de vente
Chronopost dispose d'un r√©seau de vente couvrant toutes les r√©gions du Maroc, avec des horaires d'ouverture √©largis de 8h00 √† 20h00, 6 jours sur 7. Vous pouvez localiser l'agence la plus proche de chez vous en consultant la carte interactive sur leur site.
üõ†Ô∏è Pr√©paration des envois
Pour assurer une exp√©dition sans encombre, il est recommand√© de :
Bien pr√©parer votre envoi : D√©tailler le contenu de l‚Äôenvoi, inscrire la valeur du contenu en sp√©cifiant l‚Äôunit√© mon√©taire, et ne jamais indiquer z√©ro (0) comme valeur du contenu s‚Äôil s‚Äôagit d‚Äôune marchandise.
Emballer correctement : Utiliser un emballage adapt√© pour prot√©ger le contenu.
Compl√©ter les formalit√©s douani√®res : Remplir correctement la lettre de transport et s'assurer de la conformit√© des documents.
üìû Contact
Service clients : (+212) 522 20 21 21
Email : s-client@chronopost.ma
Adresse : 110, bd Mohamed Zerktouni, 20000 Casablanca
Pour plus d'informations ou pour exp√©dier un colis, vous pouvez visiter le site officiel de Chronopost Maroc : https://www.chronopost.ma.
"""
documents.append(Document(page_content=nouveau_texte_chronopost, metadata={'source': 'chronopost_details.txt'}))

print(f"\n{len(documents)} documents (y compris le nouveau texte) cr√©√©s et pr√™ts.")

# --- Cr√©ation de la base de donn√©es vectorielle (RAG) ---
text_splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=200)
texts = text_splitter.split_documents(documents)
embeddings = GoogleGenerativeAIEmbeddings(model="models/embedding-001")
db = Chroma.from_documents(texts, embeddings)
print(f"Base de donn√©es vectorielle Chroma cr√©√©e avec {len(texts)} morceaux de texte.")



# --- Fonction d'apprentissage RAG (ajout√©e ici) ---
def apprendre_de_la_conversation(historique_conversation: list, db: Chroma):
    """
    Extrait les le√ßons d'une conversation et les ajoute √† la base de donn√©es RAG.
    Cela permet √† l'agent d'am√©liorer son comportement pour les futures sessions.
    """
    llm = ChatGoogleGenerativeAI(model="gemini-1.5-flash", temperature=0.3)
    
    prompt_resume = f"""
    En tant qu'assistant de Chronopost, r√©sume les le√ßons apprises de la conversation suivante avec un utilisateur. 
    Concentrez-vous sur la mani√®re dont les questions ont √©t√© pos√©es, le ton de l'utilisateur, et comment la r√©ponse pourrait √™tre am√©lior√©e. 
    Par exemple, si l'utilisateur a √©t√© frustr√©, une le√ßon pourrait √™tre "Adopter un ton plus empathique". Si l'utilisateur a pos√© une question complexe, une le√ßon pourrait √™tre "Donner des explications par √©tapes".

    Conversation :
    {historique_conversation}

    Le√ßons apprises (sous forme de points concis) :
    """
    
    try:
        lecons = llm.invoke(prompt_resume).content
        doc_apprentissage = Document(
            page_content=f"Le√ßons apprises d'une conversation :\n{lecons}",
            metadata={'source': 'apprentissage_continu'}
        )
        db.add_documents([doc_apprentissage])
        print("‚úÖ Le√ßons apprises ajout√©es √† la base de donn√©es RAG.")
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur lors de l'apprentissage de la conversation : {e}")


# --- Cr√©ation de l'agent et de sa logique ---
llm = ChatGoogleGenerativeAI(model="gemini-1.5-flash", temperature=0)

tools = [repondre_avec_documents, repondre_general, suivre_colis, trouver_agences_par_ville ]

# On ajoute la m√©moire de conversation √† l'agent lui-m√™me
memory = ConversationBufferMemory(memory_key="chat_history", return_messages=True)

# On initialise l'Agent Executor avec un type d'agent conversationnel
agent = initialize_agent(
    [
        repondre_avec_documents, 
        repondre_general, 
        suivre_colis, 
        trouver_agences_par_ville
    ],
    llm,
    agent=AgentType.CHAT_CONVERSATIONAL_REACT_DESCRIPTION,
    verbose=True,
    memory=memory, 
    handle_parsing_errors=True
)


# --- Ajout de l'interface web (Flask) ---
from flask import Flask, request, jsonify
from langchain.memory import ConversationBufferMemory
import threading

app = Flask(__name__)

# Une base de donn√©es simple pour stocker les m√©moires de session
# En production, vous utiliseriez une vraie base de donn√©es ou un cache (ex: Redis)
session_memories = {}

# Cette route g√®re l'envoi de messages
@app.route('/chat', methods=['POST'])
def chat():
    data = request.json
    question = data.get('question')
    session_id = data.get('session_id')

    if not session_id:
        return jsonify({"error": "Session ID is required"}), 400

    # R√©cup√©rer ou cr√©er la m√©moire de session pour l'utilisateur
    if session_id not in session_memories:
        session_memories[session_id] = ConversationBufferMemory(memory_key="chat_history", return_messages=True)

    memory = session_memories[session_id]
    
    # L'agent est r√©initialis√© avec la m√©moire de session de l'utilisateur
    agent = initialize_agent(
        tools,  # `tools` est d√©fini plus haut dans votre script
        llm,    # `llm` est d√©fini plus haut dans votre script
        agent=AgentType.CHAT_CONVERSATIONAL_REACT_DESCRIPTION,
        verbose=True,
        memory=memory, 
        handle_parsing_errors=True
    )
    
    try:
        response = agent.run(question)
        return jsonify({"response": response})
    except Exception as e:
        return jsonify({"error": str(e)}), 500

# Cette route g√®re la fin de session et d√©clenche l'apprentissage
@app.route('/end_session', methods=['POST'])
def end_session():
    data = request.json
    session_id = data.get('session_id')

    if session_id in session_memories:
        historique_conversation = session_memories[session_id].chat_memory.messages
        
        # Lancer l'apprentissage dans un thread s√©par√© pour ne pas bloquer le serveur
        # `db` est la base de donn√©es ChromaDB d√©finie dans votre code
        thread_apprentissage = threading.Thread(target=apprendre_de_la_conversation, args=(historique_conversation, db))
        thread_apprentissage.start()
        
        # Supprimer la m√©moire de la session pour la lib√©rer
        del session_memories[session_id]

    return jsonify({"status": "session ended and learning started"})

# Point d'entr√©e pour lancer le serveur Flask
if __name__ == '__main__':
    print("--- Serveur de l'agent Chronopost d√©marr√© ! ---")
    app.run(host='0.0.0.0', port=5000)# --- Ajout de l'interface web (Flask) ---
from flask import Flask, request, jsonify
from langchain.memory import ConversationBufferMemory
import threading

app = Flask(__name__)

# Une base de donn√©es simple pour stocker les m√©moires de session
# En production, vous utiliseriez une vraie base de donn√©es ou un cache (ex: Redis)
session_memories = {}

# Cette route g√®re l'envoi de messages
@app.route('/chat', methods=['POST'])
def chat():
    data = request.json
    question = data.get('question')
    session_id = data.get('session_id')

    if not session_id:
        return jsonify({"error": "Session ID is required"}), 400

    # R√©cup√©rer ou cr√©er la m√©moire de session pour l'utilisateur
    if session_id not in session_memories:
        session_memories[session_id] = ConversationBufferMemory(memory_key="chat_history", return_messages=True)

    memory = session_memories[session_id]
    
    # L'agent est r√©initialis√© avec la m√©moire de session de l'utilisateur
    agent = initialize_agent(
        tools,  # `tools` est d√©fini plus haut dans votre script
        llm,    # `llm` est d√©fini plus haut dans votre script
        agent=AgentType.CHAT_CONVERSATIONAL_REACT_DESCRIPTION,
        verbose=True,
        memory=memory, 
        handle_parsing_errors=True
    )
    
    try:
        response = agent.run(question)
        return jsonify({"response": response})
    except Exception as e:
        return jsonify({"error": str(e)}), 500

# Cette route g√®re la fin de session et d√©clenche l'apprentissage
@app.route('/end_session', methods=['POST'])
def end_session():
    data = request.json
    session_id = data.get('session_id')

    if session_id in session_memories:
        historique_conversation = session_memories[session_id].chat_memory.messages
        
        # Lancer l'apprentissage dans un thread s√©par√© pour ne pas bloquer le serveur
        # `db` est la base de donn√©es ChromaDB d√©finie dans votre code
        thread_apprentissage = threading.Thread(target=apprendre_de_la_conversation, args=(historique_conversation, db))
        thread_apprentissage.start()
        
        # Supprimer la m√©moire de la session pour la lib√©rer
        del session_memories[session_id]

    return jsonify({"status": "session ended and learning started"})

# Point d'entr√©e pour lancer le serveur Flask
if __name__ == '__main__':
    print("--- Serveur de l'agent Chronopost d√©marr√© ! ---")
    app.run(host='0.0.0.0', port=5000)
